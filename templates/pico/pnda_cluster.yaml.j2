# pnda_cluster.yaml defines the instances to create for this flavor of PNDA
# The resource_registry.yaml file defines which yaml template to apply to
# each instance type, and these specific yaml files configure the
# instance as required for that type of node.

# It is processed as a jinja2 template with the following parameters:
#   - create_network: 0|1. Set to 1 to create network related resources or to 0 when running
#                          for an openstack ironic bare-metal install

heat_template_version: 2014-10-16

parameters:
  SaltmasterFlavor:
    type: string
    description: Falvor for the salmaster nodes
    default: pnda-micro
  Manager1Flavor:
    type: string
    description: Falvor for the manager nodes
    default: pnda-micro
  EdgeFlavor:
    type: string
    description: Falvor for the edge node
    default: pnda-micro
  BastionFlavor:
    type: string
    description: Flavor for the bastion nodes
    default: pnda-micro
  KafkaFlavor:
    type: string
    description: Flavor for the kafka nodes
    default: pnda-micro
  DatanodeFlavor:
    type: string
    description: Flavor for the data nodes
    default: pnda-micro
  image_id:
    type: string
    description: default image for pnda servers
    default: ubuntu1404

  DataNodes:
    default: '1'
    description: Number of DATA nodes
    type: string

  DatanodeVolumeSize:
    default: 10
    type: number

{%if create_network is equalto 1 %}
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net:
    type: string
  private_subnet:
    type: string
{%endif%}
  KeyName:
    description: Name of an existing KeyPair to enable SSH access to the instances
    type: string
  git_private_key_file:
    description: private key file for cloning from git
    type: string
  PndaFlavor:
    description: pnda flavor
    type: string
    default: standard
  SaltmasterIP:
    type: string
{%if create_network is equalto 1 %}
  PndaSecGroup:
    type: string
  private_key:
    type: string
{%endif%}
  BastionKeyName:
    type: string
  deployment_name:
    type: string
  signal_transport:
    type: string
    default: TEMP_URL_SIGNAL
  software_config_transport:
    type: string
    default: POLL_TEMP_URL
  PndaMirror:
    description: URL of a mirror for operating system package download
    type: string
    default: ''

resources:
{%if create_network is equalto 1 %}
  KafkaSecGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Kafka Nodes
      name:
        str_replace:
          template:
            cname-kafka
          params:
            cname: { get_param: deployment_name }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
  DNSecGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Data Nodes
      name:
        str_replace:
          template:
            cname-dn
          params:
            cname: { get_param: deployment_name }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
{% endif %}
{%if create_bastion is equalto 1 %}
  bastion:
    type: OS::Pnda::bastion
    properties:
      signal_transport: { get_param: signal_transport }
      software_config_transport: { get_param: software_config_transport }
      Flavor: { get_param: BastionFlavor }
      Image: { get_param: image_id }
      name:
        str_replace:
          template: '%stackname%-bastion'
          params:
            '%stackname%': { get_param: deployment_name }
{%if create_network is equalto 1 %}
      PrivateNet: { get_param: private_net }
      PrivateSubnet: { get_param: private_subnet }
      PublicNet: { get_param: public_net }
      private_key: { get_param: private_key }
      pnda_secgroup: { get_param: PndaSecGroup }
{% endif %}
      KeyName: { get_param: BastionKeyName }
      SaltmasterIP: { get_param: SaltmasterIP }
      cluster_name: { get_param: deployment_name }
      pnda_flavor: { get_param: PndaFlavor }
      PndaMirror: { get_param: PndaMirror }
{%endif%}

  kafka:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type: OS::Pnda::kafka
        properties:
          signal_transport: { get_param: signal_transport }
          software_config_transport: { get_param: software_config_transport }
          Flavor: { get_param: KafkaFlavor }
          Image: { get_param: image_id }
          name:
            str_replace:
              template: '%stackname%-kafka-%index%'
              params:
                '%stackname%': { get_param: deployment_name }
          NodeIndex: '%index%'
          SaltmasterIP: { get_param: SaltmasterIP }
{%if create_network is equalto 1 %}
          PrivateNet: { get_param: private_net }
          PrivateSubnet: { get_param: private_subnet }
          sec_group: { get_resource: KafkaSecGroup }
          pnda_secgroup: { get_param: PndaSecGroup }
{% endif %}
          KeyName: { get_param: KeyName }
          cluster_name: { get_param: deployment_name }
          pnda_flavor: { get_param: PndaFlavor }
          PndaMirror: { get_param: PndaMirror }

  manager1:
    type: OS::Pnda::manager1
    properties:
      signal_transport: { get_param: signal_transport }
      software_config_transport: { get_param: software_config_transport }
      Flavor: { get_param: Manager1Flavor }
      Image: { get_param: image_id }
      name:
        str_replace:
          template: '%stackname%-cdh-mgr1'
          params:
            '%stackname%': { get_param: deployment_name }
{%if create_network is equalto 1 %}
      PrivateNet: { get_param: private_net }
      PrivateSubnet: { get_param: private_subnet }
      pnda_secgroup: { get_param: PndaSecGroup }
{% endif %}
      KeyName: { get_param: KeyName }
      SaltmasterIP: { get_param: SaltmasterIP }
      cluster_name: { get_param: deployment_name }
      pnda_flavor: { get_param: PndaFlavor }
      PndaMirror: { get_param: PndaMirror }

  edge:
    type: OS::Pnda::edge
    properties:
      signal_transport: { get_param: signal_transport }
      software_config_transport: { get_param: software_config_transport }
      Flavor: { get_param: EdgeFlavor }
      Image: { get_param: image_id }
      name:
        str_replace:
          template: '%stackname%-cdh-edge'
          params:
            '%stackname%': { get_param: deployment_name }
{%if create_network is equalto 1 %}
      PrivateNet: { get_param: private_net }
      PrivateSubnet: { get_param: private_subnet }
      pnda_secgroup: { get_param: PndaSecGroup }
{% endif %}
      KeyName: { get_param: KeyName }
      cluster_name: { get_param: deployment_name }
      SaltmasterIP: { get_param: SaltmasterIP }
      pnda_flavor: { get_param: PndaFlavor }
      PndaMirror: { get_param: PndaMirror }

  dn:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: DataNodes }
      resource_def:
        type: OS::Pnda::dn
        properties:
          signal_transport: { get_param: signal_transport }
          software_config_transport: { get_param: software_config_transport }
          Flavor: { get_param: DatanodeFlavor }
          Image: { get_param: image_id }
          name:
            str_replace:
              template: '%stackname%-cdh-dn-%index%'
              params:
                '%stackname%': { get_param: deployment_name }
          NodeIndex: '%index%'
{%if create_network is equalto 1 %}
          PrivateNet: { get_param: private_net }
          PrivateSubnet: { get_param: private_subnet }
          sec_group: { get_resource: DNSecGroup }
          volume_size: { get_param: DatanodeVolumeSize }
          pnda_secgroup: { get_param: PndaSecGroup }
{% endif %}
          KeyName: { get_param: KeyName }
          SaltmasterIP: { get_param: SaltmasterIP }
          cluster_name: { get_param: deployment_name }
          pnda_flavor: { get_param: PndaFlavor }
          PndaMirror: { get_param: PndaMirror }

outputs:
  kafka_hosts:
    value: { get_attr: [kafka, hosts_entry] }
