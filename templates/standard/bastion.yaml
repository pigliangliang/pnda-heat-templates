# Definition for the bastion instance type
# Specifies which bootstrap script to run to set up this instance type

heat_template_version: 2014-10-16

parameters:
  Flavor:
    description: Flavor of the bastion server
    type: string
    default: ec2.t2.medium
  KeyName:
    description: Name of an existing ssh keypair
    type: string
  PrivateNet:
    description: Private network for pnda deployment
    type: string
  PrivateSubnet:
    description: Private network for pnda deployment
    type: string
  PublicNet:
    description: Private network for pnda deployment
    type: string
  Image:
    type: string
  name:
    type: string
  SaltmasterIP:
    type: string
  private_key:
    type: string
  cluster_name:
    type: string
  pnda_flavor:
    type: string
    default: standard
  pnda_secgroup:
    type: string
  signal_transport:
    type: string
  software_config_transport:
    type: string
  PndaMirror:
    description: URL of a mirror for operating system package download
    type: string
    default: ''

resources:
  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Bastion SecurityGroup
      name:
        str_replace:
          template: cname-bastion
          params :
            cname: { get_param: cluster_name }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: PrivateNet }
      fixed_ips:
        - subnet_id: { get_param: PrivateSubnet }
      security_groups: [{ get_resource: sec_group },{ get_param: pnda_secgroup }]

  floatingIP:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: PublicNet }
      port_id: { get_resource: port}

  install_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: {get_file: scripts/base_install.sh }
          params:
            $pnda_mirror$: { get_param: PndaMirror }
            $flavor$: { get_param: pnda_flavor }
            $roles$: 'bastion'
            $master_ip$: { get_param: SaltmasterIP }
            $keyname$: { get_param: 'OS::stack_name' }
            $private_key$: { get_param: private_key }
            $pnda_cluster$: { get_param: cluster_name }
  install_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: bastion_deployment
    properties:
      signal_transport: { get_param: signal_transport }
      config:
        get_resource: install_config
      server:
        get_resource: server

  bastion_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: {get_file: scripts/bastion_install.sh }
          params:
            $private_key$: { get_param: private_key }
            $keyname$: { get_param: 'OS::stack_name' }
  bastion_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: { get_param: signal_transport }
      config:
        get_resource: bastion_config
      server:
        get_resource: server
  server:
    type: OS::Nova::Server
    depends_on: floatingIP
    properties:
      name: { get_param: name }
      image: { get_param: Image }
      flavor: { get_param: Flavor}
      key_name: { get_param: KeyName }
      networks:
        - port: { get_resource: port }
      software_config_transport: { get_param: software_config_transport }
      user_data_format: SOFTWARE_CONFIG
      config_drive: True

outputs:
  server_resource:
    description: Heat resource handle for the Nova compute server
    value:
      {get_resource: server}
