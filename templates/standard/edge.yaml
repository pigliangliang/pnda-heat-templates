# Definition for the edge instance type
# Specifies which bootstrap script to run to set up this instance type and which roles
# to apply to this instance type

heat_template_version: 2014-10-16

parameters:
  Flavor:
    description: Flavor of the edge server
    type: string
    default: ec2.t2.medium
  KeyName:
    description: Name of an existing ssh keypair
    type: string
  PrivateNet:
    description: Private network for pnda deployment
    type: string
  PrivateSubnet:
    description: Private network for pnda deployment
    type: string
  Image:
    type: string
  name:
    type: string
  SaltmasterIP:
    type: string
  NodeIndex:
    type: number
    default: 0
  cluster_name:
    type: string
  pnda_secgroup:
    type: string
  pnda_flavor:
    type: string
    default: standard
  logvolume_size:
    type: number
    default: 120
  prvolume_size:
    type: number
    default: 10
  package_repository_fs_location_path:
    description: Package repository FS location path
    type: string
    default: ''
  package_repository_fs_type:
    description: Package repository FS type
    type: string
    default: ''  
  signal_transport:
    type: string
  software_config_transport:
    type: string
  PndaMirror:
    description: URL of a mirror for operating system package download
    type: string
    default: ''

resources:
  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Edge SecurityGroup
      name:
        str_replace:
          template:
            cname-edge
          params :
            cname: { get_param: cluster_name }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8888
          port_range_max: 8888
  install_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: {get_file: scripts/base_install.sh }
          params:
            $pnda_mirror$: { get_param: PndaMirror }
            $flavor$: { get_param: pnda_flavor }
            $master_ip$: { get_param: SaltmasterIP }
            $pnda_cluster$: { get_param: cluster_name }
            $log_volume_id$: { get_resource: logvolume }
            $pr_volume_id$: { get_resource: prvolume }
            $package_repository_fs_location_path$: { get_param: package_repository_fs_location_path }
            $package_repository_fs_type$: { get_param: package_repository_fs_type }
            $roles$: 'cloudera_edge,console_frontend,console_backend_data_logger,console_backend_data_manager,graphite,gobblin,deployment_manager,package_repository,data_service,impala-shell,yarn-gateway,hbase_opentsdb_tables,hdfs_cleaner,master_dataset'
            $cloudera_role$: 'EDGE'
  install_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: [ logvolume_attachment ,  prvolume_attachment]
    properties:
      signal_transport: { get_param: signal_transport }
      config:
        get_resource: install_config
      server:
        get_resource: server

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: PrivateNet }
      fixed_ips:
        - subnet_id: { get_param: PrivateSubnet }
      security_groups: [{ get_resource: sec_group }, { get_param: pnda_secgroup }]
  logvolume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: logvolume_size }
      description: Volume for edge logs
  prvolume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: prvolume_size }
      description: Volume for package repository
  prvolume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: prvolume }
      instance_uuid: { get_resource: server }

  logvolume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: logvolume }
      instance_uuid: { get_resource: server }


  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      image: { get_param: Image }
      flavor: { get_param: Flavor }
      key_name: { get_param: KeyName }
      networks: [{ network: {get_param: PrivateNet}}]
      security_groups: [{ get_resource: sec_group }, { get_param: pnda_secgroup }]

      software_config_transport: { get_param: software_config_transport }
      user_data_format: SOFTWARE_CONFIG
      config_drive: True

outputs:
  port_resource:
    description: Heat resource handle for the Neutron port
    value:
      { get_resource: port }
  server_resource:
    description: Heat resource handle for the Nova compute server
    value:
      {get_resource: server}
  hosts_entry:
    description: >
      Server's IP address and hostname in the /etc/hosts format
    value:
      str_replace:
        template: |
          PRIMARYIP PRIMARYHOST
        params:
          PRIMARYIP: {get_attr: [server, first_address]}
          PRIMARYHOST: {get_attr: [server, name]}
